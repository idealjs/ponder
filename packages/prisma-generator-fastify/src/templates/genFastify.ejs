import type { Prisma } from "@prisma/client";
import { FastifyPluginAsync } from "fastify";
import fp from "fastify-plugin";

const routes: FastifyPluginAsync = async (fastify) => {
  fastify.zod.get("/<%= name.toLowerCase() %>/findMany",
  {
    operationId: "<%= name %>FindMany",
    querystring: "<%= name %>FindManyArgsSchema",
    reply: "<%= name %>ArraySchema",
  },
  async (req) => {
    return fastify.prisma.<%= name.toLowerCase() %>.findMany(req.params as Prisma.<%= name %>FindManyArgs);
  });
  
  fastify.zod.post("/<%= name.toLowerCase() %>/createMany",
  {
    operationId: "<%= name %>CreateMany",
    querystring: "<%= name %>CreateManyArgsSchema",
    reply: "BatchPayloadSchema",
  },
  async (req) => {
    return fastify.prisma.<%= name.toLowerCase() %>.createMany(req.body as Prisma.<%= name %>CreateManyArgs);
  });
  
  fastify.zod.patch("/<%= name.toLowerCase() %>/updateMany",
  {
    operationId: "<%= name %>UpdateMany",
    querystring: "<%= name %>UpdateManyArgsSchema",
    reply: "BatchPayloadSchema",
  },
  async (req) => {
    return fastify.prisma.<%= name.toLowerCase() %>.updateMany(req.body as Prisma.<%= name %>UpdateManyArgs);
  });
  
  fastify.zod.put("/<%= name.toLowerCase() %>/upsert",
  {
    operationId: "<%= name %>Upsert",
    querystring: "<%= name %>UpsertArgsSchema",
    reply: "<%= name %>Schema",
  },
  async (req) => {
    return fastify.prisma.<%= name.toLowerCase() %>.upsert(req.body as Prisma.<%= name %>UpsertArgs);
  });
  
  fastify.zod.delete("/<%= name.toLowerCase() %>/deleteMany",
  {
    operationId: "<%= name %>DeleteMany",
    querystring: "<%= name %>DeleteManyArgsSchema",
    reply: "BatchPayloadSchema",
  },
  async (req) => {
    return fastify.prisma.<%= name.toLowerCase() %>.deleteMany(req.body as Prisma.<%= name %>DeleteManyArgs);
  });
};

export default fp(routes);
