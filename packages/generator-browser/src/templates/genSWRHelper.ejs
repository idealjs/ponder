import { Prisma } from "@prisma/client";
import qs from "qs";
import useSWR from "swr";

import getHelper from "../../utils/getHelper";
import postHelper from "../../utils/postHelper";

export const use<%= name %>Swr = <Query extends Prisma.<%= name %>FindManyArgs>(
  query?: Query,
  base: string = window.location.origin
) => {
  const url = new URL("/<%= name.toLowerCase() %>/findMany", base).toString();
  return useSWR<
    Array<Prisma.<%= name %>GetPayload<Query>>,
    any,
    [string, Query | undefined]
  >([url, query], ([url, query]) => getHelper(url, qs.stringify(query)));
};

export const createMany<%= name %> = <Args extends Prisma.<%= name %>CreateManyArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.BatchPayload> => {
  const url = new URL("/<%= name.toLowerCase() %>/createMany", base).toString();
  return postHelper(url, args);
};

export const updateMany<%= name %> = <Args extends Prisma.<%= name %>UpdateManyArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.BatchPayload> => {
  const url = new URL("/<%= name.toLowerCase() %>/updateMany", base).toString();
  return postHelper(url, args);
};

export const deleteMany<%= name %> = <Args extends Prisma.<%= name %>DeleteManyArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.BatchPayload> => {
  const url = new URL("/<%= name.toLowerCase() %>/deleteMany", base).toString();
  return postHelper(url, args);
};

export const create<%= name %> = <Args extends Prisma.<%= name %>CreateArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.<%= name %>GetPayload<Args>> => {
  const url = new URL("/<%= name.toLowerCase() %>/create", base).toString();
  return postHelper(url, args);
};

export const update<%= name %> = <Args extends Prisma.<%= name %>UpdateArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.<%= name %>GetPayload<Args>> => {
  const url = new URL("/<%= name.toLowerCase() %>/update", base).toString();
  return postHelper(url, args);
};

export const upsert<%= name %> = <Args extends Prisma.<%= name %>UpsertArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.<%= name %>GetPayload<Args>> => {
  const url = new URL("/<%= name.toLowerCase() %>/upsert", base).toString();
  return postHelper(url, args);
};

export const delete<%= name %> = <Args extends Prisma.<%= name %>DeleteArgs>(
  args: Args,
  base: string = window.location.origin
): Promise<Prisma.<%= name %>GetPayload<Args>> => {
  const url = new URL("/<%= name.toLowerCase() %>/delete", base).toString();
  return postHelper(url, args);
};
