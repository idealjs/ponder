generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../../service/src/generated/zod"
}

generator node {
  provider = "ts-node ./src/generator-node/bin.ts"
  output   = "../../service/src/generated"
}

generator studio {
  provider = "ts-node ./src/generator-studio/bin.ts"
  output   = "../../studio/src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Schema {
  id          String       @id @unique
  name        String       @unique
  states      State[]
  transitions Transition[]
}

enum StateType {
  FINAL_STATE
  START_STATE
  ORDINARY_STATE
}

model State {
  id        String    @id @unique
  name      String?
  schema    Schema?   @relation(fields: [schemaId], references: [id])
  schemaId  String?
  stateType StateType @default(ORDINARY_STATE)

  fromFaildtransitions   Transition[] @relation("faildToStateOnTransition")
  fromSuccessTransitions Transition[] @relation("successToStateOnTransition")

  positionX Int?
  positionY Int?

  transition   Transition? @relation("startStateOnTransition", fields: [transitionId], references: [id])
  transitionId String?     @unique
  tolerance    Int?
}

model Transition {
  id String @id @unique

  startFromState State? @relation("startStateOnTransition")

  faildToState   State?  @relation("faildToStateOnTransition", fields: [faildToStateId], references: [id])
  faildToStateId String?

  successToState   State?  @relation("successToStateOnTransition", fields: [successToStateId], references: [id])
  successToStateId String?

  action   Action?  @relation(fields: [actionId], references: [id])
  actionId String?
  schemas  Schema[]
}

model Action {
  id      String  @id @unique
  name    String  @unique
  content String?

  transitions Transition[]
}
